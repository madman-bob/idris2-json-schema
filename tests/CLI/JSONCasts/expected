1/1: Building JSONCasts (JSONCasts.idr)
module Main

import Data.List
import Language.JSON

namespace Cast
    public export
    record CastItem where
        constructor MkCastItem
        name : String

public export
Cast : Type
Cast = List Main.Cast.CastItem

public export
data SomeEnum = SomeEnumNull | SomeEnumFalse | SomeEnumObject_Key_Value | SomeEnumArray_Lorem_Ipsum | SomeEnum1 | SomeEnumHelloWorld

public export
Year : Type
Year = Double

namespace Film
    public export
    data Year = Year_0 Main.Year | Year_1 ()

public export
record Film where
    constructor MkFilm
    title : String
    year : Maybe Main.Film.Year
    cast : Maybe (List Main.Cast)
    dvdAvailable : Maybe Bool
    vinylAvailable : Maybe ()
    someEnum : Maybe Main.SomeEnum

public export
Main : Type
Main = List Main.Film

namespace Cast
    public export
    Cast Main.Cast.CastItem JSON where
        cast x = JObject $ catMaybes [Just ("name", cast x.name)]

public export
Cast Main.SomeEnum JSON where
    cast SomeEnumNull = JNull
    cast SomeEnumFalse = JBoolean False
    cast SomeEnumObject_Key_Value = JObject [("key", JString "value")]
    cast SomeEnumArray_Lorem_Ipsum = JArray [JString "Lorem", JString "ipsum"]
    cast SomeEnum1 = JNumber 1
    cast SomeEnumHelloWorld = JString "Hello, world"

namespace Film
    public export
    Cast Main.Film.Year JSON where
        cast (Year_0 x) = cast x
        cast (Year_1 x) = cast x

public export
Cast Main.Film JSON where
    cast x = JObject $ catMaybes [Just ("title", cast x.title), do pure ("year", cast !x.year), do pure ("cast", cast !x.cast), do pure ("dvdAvailable", cast !x.dvdAvailable), do pure ("vinylAvailable", cast !x.vinylAvailable), do pure ("someEnum", cast !x.someEnum)]
---
1/1: Building DeferredRef (DeferredRef.idr)
module Main

import Data.List
import Language.JSON

mutual
    public export
    record A where
        constructor MkA
        b : Maybe Main.B

    public export
    B : Type
    B = Main.A

public export
Main : Type
Main = Main.A

mutual
    public export
    Cast Main.A JSON where
        cast x = JObject $ catMaybes [do pure ("b", cast !x.b)]
